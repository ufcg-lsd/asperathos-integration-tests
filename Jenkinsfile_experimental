def getBranch() {
    def branch = input(id: 'userInput', message: 'Enter git branch',
          parameters: [
                       string(defaultValue: 'master',
                              description: 'Git branch: ',
                              name: 'Branch'),
                      ]
         )

        echo("Branch: ${branch}")
        return branch
}

pipeline {
  agent any
  stages {
    stage('Integration') {
      agent any
      environment {
          GIT_BRANCH = getBranch()
      }
      steps {
        labelledShell script: 'docker network create --attachable network-integration_tests-$BUILD_ID', label: "Create test network"
        labelledShell script: 'docker build . -t integration-tests_build-$BUILD_ID', label: "Build image"
        labelledShell script: 'docker run -t -d --privileged --network=network-integration_tests-$BUILD_ID -v /.kube:/.kube/ -v d54-data-integration_tests-$BUILD_ID:/demo-tests/d54 -v organon-data-integration_tests-$BUILD_ID:/demo-tests/organon --name docker-integration_tests-$BUILD_ID asperathos-docker', label: "Run Docker container"
        labelledShell script: """docker run -i --network=network-integration_tests-$BUILD_ID -v d54-data-integration_tests-$BUILD_ID:/demo-tests/d54 \
        -v organon-data-integration_tests-$BUILD_ID:/demo-tests/organon --name integration-tests-integration_tests-$BUILD_ID \
        -e GIT_BRANCH=$GIT_BRANCH \
        -e DOCKER_HOST=tcp://docker-integration_tests-$BUILD_ID:2375 \
        -e DOCKER_HOST_URL=docker-integration_tests-$BUILD_ID \
        -e ASPERATHOS_URL=docker-integration_tests-$BUILD_ID:1500/submissions \
        -e VISUALIZER_URL=docker-integration_tests-$BUILD_ID:5002/visualizing  integration-tests_build-$BUILD_ID""" , label: "Run integration tests"
      }
    }
  }

  post {
    cleanup {
      labelledShell script: 'docker stop docker-integration_tests-$BUILD_ID', label: "Stop Docker container"
      labelledShell script: 'docker rm -v docker-integration_tests-$BUILD_ID', label: "Remove Docker container"
      labelledShell script: 'docker rm -v integration-tests-integration_tests-$BUILD_ID', label: "Remove integration tests container"
      labelledShell script: 'docker network rm network-integration_tests-$BUILD_ID', label: "Remove test network"
      labelledShell script: 'docker volume rm d54-data-integration_tests-$BUILD_ID', label: "Remove D5.4 volume"
      labelledShell script: 'docker volume rm organon-data-integration_tests-$BUILD_ID', label: "Remove Organon volume"
      labelledShell script: 'docker image rm integration-tests_build-$BUILD_ID', label: "Remove build image"
    }

    failure {
      labelledShell script: 'docker exec docker-integration_tests-$BUILD_ID docker logs testenv_manager_1', label: "Manager logs"
      labelledShell script: 'docker exec docker-integration_tests-$BUILD_ID docker logs testenv_monitor_1', label: "Monitor logs"
      labelledShell script: 'docker exec docker-integration_tests-$BUILD_ID docker logs testenv_visualizer_1', label: "Visualizer logs"
      labelledShell script: 'docker exec docker-integration_tests-$BUILD_ID docker logs testenv_controller_1', label: "Controller logs"
    }
  }
}
